import torch
from torch.utils.data import DataLoader
import numpy as np
import operator

#基于Knn分类器
def KNN_classify(k,distance,X_train,y_train,Y_test):

    # distance=='E' or distance=='M'
    assert distance == 'E' or distance =='M','dis must E or M,E为欧拉距离，M为曼哈顿距离'

    labellist=[]
    num_test=Y_test.shape[0]
    # print(num_test)
    # print(X_train.shape[0])
    # print(X_train)

    '''使用欧式距离'''
    if (distance=='E'):
        for i in range(num_test):
            distances=np.sqrt(np.sum(((X_train-np.tile(Y_test[i],(X_train.shape[0],1)))**2),axis=1))
            # print(np.tile(Y_test[i], (X_train.shape[0], 1)))
            # print(distances)
            nearest_k=np.argsort(distances)#距离由小到大进行排序，并返回index值
            topK=nearest_k[:k]
            classCount={}
            for i in topK:
                classCount[y_train[i]]=classCount.get(y_train[i],0)+1
            sortedClassCount=sorted(classCount.items(),key=operator.itemgetter(1),reverse=True)
            labellist.append(sortedClassCount[0][0])
        return np.array(labellist)
    '''使用曼哈顿距离'''
    if distance=='M':
        for i in range(num_test):
            distances=np.sum(abs(X_train-np.tile(Y_test[i],(X_train.shape[0],1))),axis=1)
            nearest_k=np.argsort(distances)
            topK=nearest_k[:k]
            classCount={}
            for i in topK:
                classCount[y_train[i]]=classCount.get(y_train[i],0)+1
            sortedClassCount = sorted(classCount.items(), key=operator.itemgetter(1), reverse=True)
            labellist.append(sortedClassCount[0][0])
        return np.array(labellist)

def getXmean(X_train):
    X_train = np.reshape(X_train, (X_train.shape[0], -1))  # 将图片从二维展开为一维
    mean_image = np.mean(X_train, axis=0)  # 求出训练集所有图片每个像素位置上的平均值
    std_image=X_train.std()
    return mean_image,std_image

def centralized(X_test,mean_image,std_image):
    X_test = np.reshape(X_test, (X_test.shape[0], -1))  # 将图片从二维展开为一维
    X_test = X_test.astype(np.float32)
    X_test -= mean_image  # 减去均值图像，实现零均值化
    return X_test



#KNN实现MNIST数据分类
#使用pytorch框架进行数据的下载与读取
import torch
import torchvision.datasets as da
import torchvision.transforms as transforms
batch_size=100
#minist dataset
train_dataset=da.MNIST(root='/pymnist', #选择数据根目录
                       train=True,      #选择训练数据集
                       transform=None,  #不考虑使用任何数据预处理
                       download=True)   #从网上下载
test_dataset=da.MNIST(root='/pymnist',  #选择数据根目录
                       train=False,     #选择测试数据集
                       transform=None,  #不考虑使用任何数据预处理
                       download=True)   #从网上下载
#加载数据
train_loader=torch.utils.data.DataLoader(dataset=train_dataset,
                                         batch_size=batch_size,
                                         shuffle=True)#打乱数据
test_loader=torch.utils.data.DataLoader(dataset=test_dataset,
                                        batch_size=batch_size,
                                        shuffle=True)

'''
数据集数据都是n*m维的矩阵，这里的n是样本数（行数），m是特征数（列数）
训练集包括6000个样本，测试集包括10000个样本，在MNIST数据集中，每张图片由28*28像素点构成
每个像素点使用一个灰度值表示
我们将28*28像素展开为一个一维的行向量，所以每一行就是一张图
'''


#可视化
import matplotlib.pyplot as plt
photo_1=train_loader.dataset.train_data[0]
plt.imshow(photo_1,cmap=plt.cm.binary)
plt.show()
print(train_loader.dataset.train_labels[0])

if __name__=='__main__':

# 归一化处理后的结果
    x_train = train_loader.dataset.train_data.numpy()
    x_mean, x_std = getXmean(x_train)
    x_train = centralized(x_train, x_mean, x_std).reshape(x_train.shape[0], 28 * 28)
    y_train = train_loader.dataset.train_labels.numpy()

    x_test = test_loader.dataset.test_data[:1000].numpy()
    x_mean, x_std = getXmean(x_test)
    x_test = centralized(x_test, x_mean, x_std).reshape(x_test.shape[0], 28 * 28)
    y_test = test_loader.dataset.test_labels[:1000].numpy()
    num_test = y_test.shape[0]

    y_test_pred = KNN_classify(5, 'E', x_train, y_train, x_test)
    num_correct = np.sum(y_test_pred == y_test)
    accuracy = float(num_correct) / num_test
    print('E: Got %d / %d correct => accuracy: %f' % (num_correct, num_test, accuracy))#0.962000

    y_test_pred = KNN_classify(5, 'M', x_train, y_train, x_test)
    num_correct = np.sum(y_test_pred == y_test)
    accuracy = float(num_correct) / num_test
    print('M: Got %d / %d correct => accuracy: %f' % (num_correct, num_test, accuracy))0.954000

# 开发时间 ；2021/5/31 0031 21:19

import numpy as np
import matplotlib.pyplot as plt
import operator
#训练数据的类别
def creatDataSet():
    X_train=np.array([[1.0,2.0],[1.2,0.1],[0.1,1.4],[0.3,3.5],[1.1,1.0],[0.5,1.5]])
    y_train=np.array(['A','A','B','B','A','B'])
    return X_train,y_train
if __name__=='__main__':
    X_train,y_train=creatDataSet()
    plt.scatter(X_train[y_train=='A',0],X_train[y_train=='A',1],color='r',marker='*')
    plt.scatter(X_train[y_train=='B',0],X_train[y_train=='B',1],color='g',marker='+')
    plt.show()

#基于欧式距离的Knn分类器
def KNN_classify(k,distance,X_train,y_train,Y_test):
    '''
    :param k:
    :param distance: 距离
    :param X_train: 上述group
    :param x_train: label
    :param Y_test:测试集
    :return: 标签列表
    '''
    # distance=='E' or distance=='M'
    assert distance == 'E' or distance =='M','dis must E or M,E为欧拉距离，M为曼哈顿距离'

    labellist=[]
    num_test=Y_test.shape[0]
    print(num_test)
    print(X_train.shape[0])
    print(X_train)

    '''使用欧式距离'''
    if (distance=='E'):
        for i in range(num_test):
            distances=np.sqrt(np.sum(((X_train-np.tile(Y_test[i],(X_train.shape[0],1)))**2),axis=1))
            print(np.tile(Y_test[i], (X_train.shape[0], 1)))
            print(distances)
            nearest_k=np.argsort(distances)#距离由小到大进行排序，并返回index值
            topK=nearest_k[:k]
            classCount={}
            for i in topK:
                classCount[y_train[i]]=classCount.get(y_train[i],0)+1
            sortedClassCount=sorted(classCount.items(),key=operator.itemgetter(1),reverse=True)
            labellist.append(sortedClassCount[0][0])
        return np.array(labellist)
    '''使用曼哈顿距离'''
    if distance=='M':
        for i in range(num_test):
            distances=np.sum(abs(X_train-np.tile(Y_test[i],(X_train.shape[0],1))),axis=1)
            nearest_k=np.argsort(distances)
            topK=nearest_k[:k]
            classCount={}
            for i in topK:
                classCount[y_train[i]]=classCount.get(y_train[i],0)+1
            sortedClassCount = sorted(classCount.items(), key=operator.itemgetter(1), reverse=True)
            labellist.append(sortedClassCount[0][0])
        return np.array(labellist)
if __name__=='__main__':
    X_train,y_train=creatDataSet()
    y_test_pred=KNN_classify(1,'M',X_train,y_train,np.array([[1.0,2.1],[0.4,2.0]]))
    print(y_test_pred)
